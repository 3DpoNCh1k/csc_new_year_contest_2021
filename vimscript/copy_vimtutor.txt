    Этот материал подан в виде отдельного текстового файла, чтобы вы практикова-
    лись по мере чтения. Вам нужно выполнять команды из этого урока --- так вы 
    сможете их запомнить, а затем использовать. 
    Eсли вы что-то нажали и испортили файл, то нажмите <ESC> и клавишу  u  (от 
    слова undo) необходимое число раз для отмены изменений.

    Лучше отложите мышь в сторону и постарайтесь использовать только клавиатуру. 
    Это может быть тяжело с непривычки, но в будущем это окупится скоростью 
    работы с текстом.

    Теперь убедитесь, что у вас включена английская раскладка клавиатуры, а кла-
    виша Caps-Lock не зажата.

    Удачи!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 Перемещение

    Для перемещения каретки используйте клавиши h,j,k,l:
               
                ^           Подсказка: h находится слева и перемещает влево
        < h  j  k  l >                 l находится справа и перемещает вправо
             v                         j напоминает стрелку, смотрящую вниз
               

    Выбор этих клавиш может показаться странным, но они будут очень удобны тем, 
    кто знаком со слепой печатью или правильной постановкой пальцев на клавиату-
    ре, поскольку пальцам не нужно покидать home row и тянуться к стрелкам.

ЗАДАНИЕ 
    Попробуйте использовать эти клавиши и пройти лабиринт, не врезаясь в стены.

          ______________________________________________
    старт _____________  ____________  ______| _________|
          |____  ___________  |_______________________  |
          |  ____|____________  ___________|_______  ___|
          |___________|_  ______|_______________________|
          |______  __________________________  _________|
          |_________  | ________|_____  ________________|
          |  _________|__  ______________|  ____  ______|
          |  ___|_______________  |_____________________|
          |________| __________________________| _______|
          |__  ______|______  ________  ___|_______  ___|
          |________________________|___________  _______|
          |_  _________________|  ________|___________  |
          |______  |___________|  |_____________|  _____|
          |_____________________________________________  финиш


    Перемещать каретку по одному символу --- далеко не самый быстрый способ 
    перемещения. Можно перемещаться и по словам:

    w - к следующему началу слова
    e - к следующему концу слова
    b - к предыдущему началу слова

    Подобные простые перемещения могут принимать перед собой число, чтобы повто-
    рять перемещение нужное количество раз. Например,   5j  сдвинет каретку на 5 
    строк вниз, а  10w  переместит каретку на 10 слов вперед.

    Базовые  перемещения, доступные в Vim:
    % - перемещение к парной скобке.
        ПРИМЕР:
        если вы поместите каретку на первую фигурную скобку и нажмете  % , то 
        каретка переместится на фигурную скобку в конце метода.

            private fun abs(number: Int): Int {
              return if (number > 0) number else -number
            }

   7G - переместиться на седьмую строку (число может быть любым)
   gg - переместиться в начало файла
    G - переместиться в конец файла
    ^ - переместить каретку в начало строки
    $ - переместить каретку в конец строки
    * - переместить каретку на следующее появление слова в тексте
        (удобно при работе с переменными к коде)

ЗАДАНИЕ        
    Попробуйте поставить каретку поверх number и нажать  *
        
            val number = 10
            println(abs(number))

  ! Отступление про обозначения
    В данном уроке клавиши будут обозначаться так же, как и принято в Vim
    <Esc> - клавиша Esc
     <CR> - клавиша Enter
    <C-x> - сочетание клавиш Ctrl-x (вместо x может быть любой другой символ)

    # - то же самое, что и  *  , но ищет в обратную сторону
<C-d> - перемещает каретку вниз на половину страницы
<C-u> - перемещает каретку вверх на половину страницы        



ЗАДАНИЕ
    Попрактикуйте перемещения. Проведите каретку по тексту так, чтобы она ни 
    разу не была на заглавной букве. Проявите креативность и попробуйте исполь-
    зовать как можно больше изученных выше команд перемещения. 

    lorem [ipsum DOLOR sit amet CONSECTETUR ADIPISCING ELIT Integer sed lorem et 
    Leo] finibus (DIGNISSIM SIT amet non enim "Duis eget massa orci") Praesent 
    nibh {sapien {PELLENTESQUE} "quis"} pretium non IACULIS quis massa Maecenas 
    'fringilla nec' turpis sit ((amet ("INTERDUM. Mauris") euismod) quam) UT nun 
    lacinia egestas [] Phasellus eu aliquet dui Curabitur AC pretium SEM non 
    Feugiat tellus Ut (et VENENATIS sapien Vestibulum at NUNC id purus facilisis 
    lacinia ID EU lacus)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                     Поиск

    Нажмите  / , чтобы открыть поле поиска и введите паттерн для поиска, после 
    чего нажмите Enter. Про паттерны поговорим позже, на этом этапе достаточно 
    знать, что слово тоже является паттерном. 
    Откройте поле поиска, введите туда "amet" и нажмите клавишу Enter, чтобы 
    переместиться к следующему появлению слова "amet" в файле. Нажмите  n  для 
    перемещения дальше по результатам поиска или  N  для перемещения назад по 
    результатам поиска.

    Integer sed lorem et leo finibus dignissim sit amet non enim. Duis eget mas-
    sa orci. Praesent nibh sapien, pellentesque quis pretium non, iaculis quis 
    massa. Maecenas fringilla nec turpis sit amet interdum.

    Есть и  поиск в обратную сторону. Нажатие  ?  открывает поле для 
    поиска в обратную сторону.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   Паттерны

    Паттерны — один из мощнейших инструментов vim, который рассмотреть в рамках 
    такого короткого урока не выйдет, но приведу некоторые примеры:
  
    \zsing\> - слова, оканчивающиеся на "ing”
     \<fun\> - слово "fun", причем слова, содержащие подстроку "fun", результа-
               том поиска являться не будут. Сравни результат поиска по "fun" и 
               "\<fun\>" для строки ниже:
          
                   function fun defund
    
        \d\+ - числа
    
    На первое время достаточно знать, что само слово для поиска --- это тоже 
    паттерн,  \cWord  - слово "Word" нечувствительно к регистру, а  \CWord  - 
    чувствительно к регистру. Откройте поле поиска нажатием клавиши  /  и 
    проверьте это на строке ниже:
    
        word Word WoRd WORD


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Нормальный режим

    Все это время вы работали в "нормальном" режиме, который предназначен 
    для быстрого перемещения по тексту и манипуляций с ним посредством команд. 
    Чтобы попасть в этот режим, достаточно нажать клавишу  <Esc>

    Простые команды:
    u - отменить изменение
    x - вырезать символ под кареткой
    r - заменить букву под кареткой. например,  rk  заменит букву под кареткой 
        на k
    d - удаление, принимает движение
        например:
        dh - удаляет один символ слева
        dw - удаляет слово
       d4w - удаляет 4 слова
        d$ - удаляет до конца строки
       di" - удаляет содержимое кавычек (delete inside " )
       di( - удаляет содержимое скобок (delete inside ( )
        dd - удалить текущую строку

    Текст для практики команд:
    lorem [ipsum DOLOR sit amet CONSECTETUR ADIPISCING ELIT Integer sed lorem et 
    Leo] finibus (DIGNISSIM SIT amet non enim "Duis eget massa orci") Praesent 
    nibh {sapien {PELLENTESQUE} "quis"} pretium non IACULIS quis massa Maecenas 
    'fringilla nec' turpis sit ((amet ("INTERDUM. Mauris") euismod) quam) UT nun 
    lacinia egestas [] Phasellus eu aliquet dui Curabitur AC pretium SEM non 
    Feugiat tellus Ut (et VENENATIS sapien Vestibulum at NUNC id purus facilisis 
    lacinia ID EU lacus)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 Режим ввода

    В режиме ввода вы можете печатать текст так же, как в обычных текстовых 
    редакторах. Для перехода в режим ввода нажмите  i.
     Есть и другие способы перейти в режим ввода:
    
    a - то же самое, что и i, но ввод начнется после каретки, а не до
    I - перемещение каретки в начало строки и переход в режим ввода.
        Попробуйте, используя клавишу  I,  закомментировать строку (добавить 
        "//" в ее начало).
          
          val number: Int = 42;

    A - переход в режим каретки в самом конце строки
        Используйте  A и добавьте ; в конец строки ниже
          
          val number: Int = 42

    o - перемещение в новую строку под текущей и переход в режим ввода
    O - перемещение в новую строку над текущей и переход в режим ввода

        Попробуйте поместить каретку на слово name и создать еще два поля (свер-
        ху и снизу), используя  o  и  O

          private val name: String = "Egor";


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Режим выделения

    Нажмите  v,  чтобы перейти в режим выделения. В этом режиме каретку можно 
    перемещать теми же командами, что и в нормальном режиме. Чтобы покинуть 
    режим выделения, можно нажать  <Esc>  (переход в нормальный режим).
    Также можно нажать y  (от слова yank), чтобы скопировать выделенный текст. 
    Для вставки используйте команду  p  (от слова paste).
    Выделите содержимое первых кавычек, скопируйте его и вставьте во вторые 
    кавычки
      
      "quoted text" ---> ""

    Можно нажать  V  и перейти в режим построчного выделения, зачастую это 
    быстрее, чем обычное выделение.

    Если нажать  <C-v> , то вы перейдете в режим блочного выделения.
    Попробуйте выделить одновременно все три слова "private" через режим блочно-
    го выделения, а после удалите их, нажав  d.
    
      private var n1: Int? = null
      private var n2: Int? = 10
      private var n3: Int? = 42
    
    Теперь блочно выделите начала всех трех строк (допустим, букву v из var) и 
    нажмите I, после чего напишите слово private и нажмите <Esc>. Таким образом 
    можно добавлять что-то общее перед выделенным текстом во все строки. 
    Аналогично можно добавлять в конец, используя клавишу A.

      var n1: Int? = null
      var n2: Int? = 10
      var n3: Int? = 42

    Попробуйте блочным выделением выделить все три буквы "r" в словах var и 
    выполнить команду  rl  , чтобы заменить выделенные символы на l:
    
      private var n1: Int? = null
      private var n2: Int? = 10
      private var n3: Int? = 42
    
    Если выделить текст и нажать  U  , то текст перейдет в верхний регистр;
    если нажать  u  - в нижний.
    Попробуйте перевести имя константы в верхний регистр, а содержимое кавычек 
    - в нижний.  Не забудьте про  vi" - v inside " , чтобы разом выделить 
    содержимое. 

      private final val my_const = "cAsE sEnseTivIty WEnT cRaZy hEre"

    Vim умеет выставлять правильные отступы в коде. Попробуйте выделить код 
    ниже и нажать  = 
  ! в IdeaVim это не сработает, так как расширение файла -- txt.
    В файлах с соответствующим расширением команда поддерживается.

      private fun isOdd(number: Int): Boolean {
         if (number % 2 == 0) {
                  return false 
                    } else {
              return true
              }
                }


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  Регистры

    После того, как вы скопировали текст, он хранится в определенном месте - 
    регистре. По умолчанию регистр для команд d, c, s, x, y - регистр без имени, 
    который в Vim обозначают "". Первая кавычка указывает на сам факт того,что 
    речь идет о регистре, а вторая - символ, который указывает на конкретный 
    регистр.
    Существуют и буквенные регистры "a - "z и "A - "Z . Если вы копируете текст 
    в регистр с маленькой буквы, то его содержимое перезапишется; если в регистр
    c большой буквы, текст дозапишется к текущему содержимому.
    Регистр необходимо указывать перед командой, иначе будет использован регистр
    по умолчанию ("").
    Чтобы вставить содержимое регистра в режиме ввода, нажмите  <C-r>  и символ 
    регистра.
    
    Пример:
      "ayw - скопирует слово в регистр a
       "ap - вставит содержимое регистра a
    <C-r>a - вставит содержимое регистра a в режиме ввода 

    Чтобы вставить содержимое регистра в режиме ввода, нажмите  <C-r>  и символ 
    нужного регистра.
    Есть десять видов регистров, и это очередной мощный инструмент, который в 
    этом уроке раскрыть не получится. Расскажу только про один особенно интерес-
    ный - регистр вычисления выражений на языке vim script -  "=
    Находясь в режиме ввода, нажмите  <C-r>=  , --- внизу экрана откроется поле 
    для ввода выражения на языке vim script. Про язык vim script расскажу позже, 
    а пока можете попробовать ввести туда простое арифметическое выражение вроде  
    4 + 2 . Результат будет подсчитан и вставлен в текст.

    Попробуйте завершить примеры, используя регистр вычисления выражений:
      43 + 39 * 56 = 
      sin(1) = 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Командный режим

    Для перехода в командный режим нажмите  :  . После нажатия внизу окна 
    появится поле для ввода команды. Чтобы выполнить введенную команду, 
    нажмите Enter.
    Чтобы выйти из командного режима, можно нажать  <C-c>  или  <Esc>.
    Команд в Vim огромное количество, ниже рассмотрим основные.
    
Команда substitute
    Можно писать имя команды целиком, но можно ввести просто букву  s  --- Vim 
    поймет, о чем идет речь.
    Используется для замены одного текста на другой, например, если вы поместите
    каретку в строку ниже и введете в командном режиме  s/one/two , то замените
    слово "one" на "two"

      one + two = four

    Команда мощнейшая и работает не просто со словами, а с паттернами. 
    Результатом замены может являться не только текст, но и некоторая функция. 
    Например, при помощи этой команды можно сменить систему счисления 
    всех чисел в файле/выделенном тексте/необходимом диапазоне строк и т.п.
    Команда substitute не пригодится вам в задачах для соревнования, но ее 
    нельзя было не упомянуть. 
    

Опции и команда set
    Опции — самый простой способ кастомизировать Vim под себя. У каждой опции 
    есть полное название и сокращенное, значением может быть число или строка.
    Формально есть еще булевы опции, но они также хранят число. Если это число 
    --- 0,то значение ложное, иначе истинное.
    Команда set отвечает за работу с опциями. Рассмотрим опцию  relativenumber  
    или сокращенно  rnu  . Это булева опция, которая отвечает за отображение 
    относительных номеров строк.
    set имя_опции - активация булевой опции
    set noимя_опции - деактивация опции
    Таким образом  :set rnu  или  :set relativenumber  включают отображение но-
    меров строк, а  :set nornu  и  :set norelativenumber  --- выключают.
    C относительными номерами гораздо проще перемещаться по документу вертикаль-
    но. Если вы хотите переместиться на строку с относительным номером 24
    сверху, то введите  24k.
    Есть опция  number  или  nu  , которая отвечает за отображение номера 
    текущей строки.
    Опций сотни, и они довольно часто используются, поэтому в этом уроке стоило 
    их хотя бы упомянуть.


Команда nohlsearch
    Введите  :noh  или  :nohlsearch  , чтобы убрать подсвечивание результатов 
    предыдущего поиска
  ! в IdeaVim по дефолту результаты поиска не подсвечиваются, поэтому может быть
    не понятно, о чем идёт речь. Чтобы включить подсвечивание результатов 
    поиска, введите  :set hls

    
Команда move
    Достаточно написать  m  , [ove]  необязательная часть команды. Для понимания 
    этой команды нужно хорошо усвоить диапазоны, но она нам пригодится в будущем
    , поэтому приведу готовые примеры:

      :m+1 - сдвинуть текущую строку вниз
      :m-2 - сдвинуть текущую строку вверх
    
    Попробуйте при помощи команды упорядочить числа в порядке возрастания.
      
      2
      5
      3
      1
      4

    
Команда map
    Наверное, самая важная команда Vim. Позволяет привязывать последовательность
    нажатых клавиш к некоторому действию. Действие может быть любым (ограничено 
    только фантазией: подтягивать свежие коммиты из репозитория / ставить брейк-
    поинты в коде / переводить выделенный текст с одного языка на другой). Это 
    одна из прелестей Vim — если вам чего-то не хватает, то вы всегда можете 
    написать некоторое количество кода и подстроить редактор под себя).
    Есть множество нюансов вокруг команды map, 
    поэтому в этом уроке она максимально упрощена.
    Синтаксис следующий:

      {map} {lhs} {rhs}
      
    {map} - вид команды map
    {lhs} - какие клавиши привязаны к действию
    {rhs} - само действие

    Виды команды map:
    nnoremap - команда для нормального режима 
    vnoremap - команда для режима выделения
    inoermap - команда для режима ввода текста

    Примеры:
    "nnoremap J :m+1<CR>"  и  "nnoremap K :m-2<CR>" - маппинги для перемещения 
    текущей строки вверх и вниз при нажатии клавиш  J , K  в нормальном режиме. 
    Обратите внимание, что вы явно указываете Vim, что нужно открыть поле для 
    ввода команды - :  и вводите эту команду нажатием Enter - <CR>
    Попробуйте снова расставить числа в порядке возрастания, но на этот раз ис-
    пользуя клавиши  J  и  K   вместо ввода самих команд. Быстрее, правда?

        2
        5
        3
        1
        4

    "nnoremap dm V/stop deletion<CR>d:noh<CR>" - при нажатии  dm  в нормальном 
    режиме удалит все строки начиная от текущей и заканчивая строкой, содержащей 
    "stop deletion". 

    V - переход в режим построчного выделения, выделит текущую 
        строку  
    /stop deletion<CR> - передвинет каретку на строку, содержащую 
        "stop deletion". 
    d - команда удаления 
    :nohl<CR> - погасить подсвечивание результатов поиска
        
    Этот маппинг только для примера, и повторять его не нужно. Но если очень 
    хочется, то внизу текст для теста.
        
        test 
        test line line
        test line
        stop deletion
        
    "inoremap jk <Esc>"  - в режиме ввода текста при нажатии сочетания клавиш  
    jk  происходит нажатие клавиши <Esc> (переход в нормальный режим). Этот 
    маппинг довольно популярен, поскольку не все хотят покидать home row и 
    тянуть палец к клавише  <Esc>
    
    "vnoremap = u="  - при нажатии  =  в режиме выделения выделенный текст 
    перейдет в нижний регистр (u) и выровняется (=). Смысла в этом конкретном 
    маппинге мало, он служит больше для демонстрации "vnoremap"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   Макросы
    
    В Vim существуют макросы --- последовательности команд, которые можно 
    записать. Если вам нужно повторить одни и те же действия в десяти разных 
    местах, то можно просто записать макрос и сэкономить себе время. Например, 
    у вас есть список пользователей
      
      Anton
      Ivan
      Oleg
      Maria
      Nikita
      Alex
      Gena
      Nikolay
    
    который нужно превратить в следующий скрипт

      ALTER USER Anton IDENTIFIED BY 'Anton';
      ALTER USER Ivan IDENTIFIED BY 'Ivan';
      ALTER USER Oleg IDENTIFIED BY 'Oleg';
      ALTER USER Maria IDENTIFIED BY 'Maria';
      ALTER USER Nikita IDENTIFIED BY 'Nikita';
      ALTER USER Alex IDENTIFIED BY 'Alex';
      ALTER USER Gena IDENTIFIED BY 'Gena';
      ALTER USER Nikolay IDENTIFIED BY 'Nikolay';

    для этого достаточно записать макрос для Антона, а потом сказать Vim выпол-
    нить его еще семь раз.
    Чтобы записать макрос в регистр  a  (пока что считайте, что регистр
    --- хранилище с именем некоторого символа), нужно ввести  qa  в нормальном
    режиме, где
    q - указывает начать записывать макрос
    a - указывает куда его записать
    Дальше следует последовательность действий, которая заканчивается нажатием 
    клавиши  q  в нормальном режиме --- говорит закончить запись макроса. Чтобы 
    вызвать получившийся макрос, нужно нажать в нормальном режиме  @a  . Чтобы 
    вызвать макрос 3 раза ---  3@a  .
    В случае нашего примера макрос выглядит следующим образом (каретка в начале 
    строки с именем Anton)

      qaywiALTER USER <Esc>A IDENTIFIED BY '<Esc>pa';<Esc>^jq
    
    Разберем по частям:
      
      qa - начать запись макроса в регистр  a
      yw - копируем слово
       i - переходим в режим ввода перед словом
ALTER USER - вводим этот текст в режиме ввода
   <Esc> - возвращаемся в нормальный режим
       A - входим в режим ввода в конец строки
 IDENTIFIED BY ' - вводим этот текст в режиме ввода
   <Esc> - возвращаемся в нормальный режим
       p - вставляем скопированное слово
       a - входим в режим ввода после каретки
      '; - вводим этот текст в режиме ввода
   <Esc> - возвращаемся в нормальный режим
       ^ - перемещаемся в начало строки
       j - перемещаемся на строку ниже (чтобы можно было выполнить макрос уже на
           следующей строке)
       q - закончить запись макроса

    Имея этот макрос, можно, находясь в начале строки Ivan, ввести  7@a  , чтобы 
    привести все оставшиеся строки к нужному виду. Попробуйте это все повторить.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Как выйти из  Vim
    
    Чтобы сохранить изменения, введите команду  :w  (w = write)
    Чтобы выйти, введите команду  :q  (q = quit)
    Эти команды можно совместить и писать сразу  :wq

  * Если вы хотите выйти и не сохранять изменения, то просто команда  :q  выдаст
    ошибку. Чтобы её не было, введите команду  :q!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  Vim script

    Vim script --- это язык, который вы используете в режиме ввода команд. При 
    помощи этого языка можно писать хитрые маппинги, плагины (недавно на нем на-
    писали даже github copilot) и прочие способы кастомизировать редактор под 
    себя и сделать работу в нем удобнее. 

    .vimrc
    После того, как вы покинете Vim, все введенные команды (маппинги, set) забу-
    дутся. Чтобы не вводить команды каждый раз, в Vim существуют файлы 
    конфигурации, которые хранят наборы команд, которые будут выполняться перед 
    каждым запуском Vim. Основной файл с конфигурацией --- .vimrc (для 
    пользователей windows - _vimrc).
    Для тех, кто работает в Vim:
    Изначально этот файл отсутствует, его нужно создать в домашней директории.
    Для тех, кто работает в IdeaVim:
    Этот файл - .ideavimrc . Достаточно кликнуть по иконке плагина внизу IDE 
    и нажать "create ~/.ideavimrc", чтобы открыть файл. Туда же можно
    писать решения задач и кликать на кнопку обновления файла в правой верхней
    части экрана (или нажимать Ctrl-Shift-o), чтобы файл исполнился (аналог 
    команды source, о которой речь пойдёт ниже).

    Команда source
    Если же вы хотите выполнить скрипт из какого-то определенного файла, но при 
    этом не выполнять файл каждый раз, то можно использовать команду source
    source путь_к_файлу - выполняет файл
    Например, для .vimrc это выглядело бы как  source ~/.vimrc
    Эта команда может пригодиться при решении завтрашних задач. Решение можно 
    писать в отдельном файле, а проверять его можно командой source внутри файла
    для теста.
  ! перед применением команды source убедитесь, что сохранили изменения в файле 
    (  :w  )


    Начнем с типов данных и операторов.
    Есть 4 основных типа данных: число, строка, список и словарь
    Число и булев тип --- это одно и то же. Если число равно 0, то значение 
    ложно, иначе истинно.
    Строка заключена в одинарные или двойные кавычки.сть небольшая разница, о 
    которой в уроке рассказано не будет.
    Список пишется в квадратных скобках и разделяется запятой.
    Словарь пишется в фигурных скобках и разделяется запятой. 
    * Команда let служит для объявления переменных 

      let n = 10 - объявление числа со значением 10
      let n2 = 12.3 - объявление дробного числа
      let s = 'my string' - объявление строки со значением "my string"
      let list = [n, s] - объявление списка
      let dict = {'first element': n, 'second element': s} - объявление словаря

   К элементам словаря и строки можно обращаться по индексу, например,  s[10]  
   получит 11-ый элемент (т.к. нумерация начинается с 0) строки или массива s.
   Получение элемента словаря по ключу схоже:  value = dictionary['key']. 
   Словари устроены так, что их ключом может быть только строка. Даже если вы 
   передаете в качестве ключа число, то оно будет приведено к строчному типу.

   
   Команда echo
   Эта команда необходима для вывода информации на экран. Например, если вы 
   введете команду  let x = 12 , а после выполните  echo x  , то в нижней части
   экрана будет выведено число 12. Можете использовать эту команду для тестиро-
   вания <<на коленке>> вещей, которые увидите дальше.
   
   Числовые операторы 
   + - сложение
   - - вычитание
   % - остаток по модулю
   / - деление
   * - умножение
   Важно, что при использовании числовых операторов оба операнда будут приведены 
   к числовому типу. В Vim интересным образом работает приведение строк к числу:
   если строка начинается с числа, то это число считается за результат, иначе 
   --- 0.
   Пример:
     "42" == 42
     "42dogs" == 42
     "dogs" == 0
   Оператор сложения может использоваться для объединения списков. Например,
     [1, 2] == [1] + [2]
   
   Также есть и операторы конкатенации  .  и  ..  . Вариант с одной точкой
   считается устаревшим, рекомендуется использовать две точки.

   Булевы операторы
   || - логическое или
   && - логическое и
   !  - логическое не
   Операторы сравнения 
   == - проверка на равенство
   != - проверка на неравенство
   Операторы меньше, больше, меньше или равно и т.д. стандартные. Гораздо важнее
   , что после операторов сравнения может следовать  ?  для сравнения без учета 
   регистра и  #  для сравнения с учетом регистра. Если ? или # не написан, то 
   будет выбираться предпочтительное сравнение из опции ignorecase  , поэтому 
   результат сравнения будет разниться на разных компьютерах и рекомендуется 
   прописывать вид сравнения явно.

   Стандартные конструкции.
   C ними вы наверняка знакомы из других языков. 
   Ниже примеры, как они выглядят в vim script

IF
==
     if условие
       " набор команд
     elseif условие
       " набор команд
     else
       " набор команд
     endif 


FOR
===  
    Согласно документации цикл for применим только для итерации по спискам.
    В Vim и IdeaVim можно итерироваться и по строкам, однако в том же NeoVim 
    это не поддерживается (как и на сервере, который будет проверять ваши 
    решения), поэтому рекомендуется использовать его только для списков.

      for element in elements
        " do something
      endfor


WHILE
===== 
      while условие
        " do something
      endwhile

    Циклы for и while поддерживают известные вам из других языков  break  и 
    continue
    Если вы захотите итерироваться по строке, то используйте функцию  len()  ,
    которая возвращает длину строки

      let i = 0
      while i < len(string)
        let char = string[i]
        " do something with the char
        let i += 1
      endwhile


FUNCTION
========
      function! Sum_args(arg1, arg2)
        let argsum = a:arg1 + a:arg2
        return argsum
      endfunction
    
    Тут важно уточнить несколько вещей:
 1. восклицательный знак после слова function не обязателен, он говорит 
    создать новую функцию с данным именем, если имя свободно, либо 
    переопределить старую функцию, если имя занято; 
 2. имя функции всегда начинается с заглавной буквы;
 3. если вы хотите обратиться к аргументу изнутри функции, то пишите перед ним 
    a:  --- это уточнение, что аргумент с данным именем нужно искать в области 
    видимости аргументов функции. Всего существует 8 областей видимости, но 
    для начала вам хватит и этой;
 4. return не обязателен, однако если вы его не напишете, то функция все равно 
    будет возвращать дефолтное значение, которое равно нулю.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            Как учить вим дальше?

    Если после всего этого вы захотели работать в Vim, то для начала 
    советую пройти серию из 6-ти коротких видеоуроков по ссылке ниже:
    https://youtu.be/H3o4l4GVLW0
    Если хотите преисполниться в самом vim script, то лучше начать с курса
    "Learn Vimscript the Hard Way":
    https://learnvimscriptthehardway.stevelosh.com

